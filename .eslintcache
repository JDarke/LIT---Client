[{"C:\\Users\\UnitA\\Projects\\LIT\\LIT---Client\\src\\components\\chatWindow\\ChatWindow.comp.js":"1","C:\\Users\\UnitA\\Projects\\LIT\\LIT---Client\\src\\components\\header\\Header.comp.js":"2","C:\\Users\\UnitA\\Projects\\LIT\\LIT---Client\\src\\components\\SelectRoom\\SelectRoom.comp.js":"3","C:\\Users\\UnitA\\Projects\\LIT\\LIT---Client\\src\\App.js":"4","C:\\Users\\UnitA\\Projects\\LIT\\LIT---Client\\src\\index.js":"5","C:\\Users\\UnitA\\Projects\\LIT\\LIT---Client\\src\\components\\home\\Home.comp.js":"6","C:\\Users\\UnitA\\Projects\\LIT\\LIT---Client\\src\\components\\footer\\Footer.comp.js":"7","C:\\Users\\UnitA\\Projects\\LIT\\LIT---Client\\src\\components\\menu\\Menu.comp.js":"8"},{"size":925,"mtime":1609428945989,"results":"9","hashOfConfig":"10"},{"size":1513,"mtime":1609431927884,"results":"11","hashOfConfig":"10"},{"size":3313,"mtime":1609433059605,"results":"12","hashOfConfig":"10"},{"size":13278,"mtime":1609445753087,"results":"13","hashOfConfig":"10"},{"size":271,"mtime":1609428945995,"results":"14","hashOfConfig":"10"},{"size":742,"mtime":1609234100750,"results":"15","hashOfConfig":"10"},{"size":802,"mtime":1609428945990,"results":"16","hashOfConfig":"10"},{"size":1120,"mtime":1609431472068,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s6bcxj",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\UnitA\\Projects\\LIT\\LIT---Client\\src\\components\\chatWindow\\ChatWindow.comp.js",[],"C:\\Users\\UnitA\\Projects\\LIT\\LIT---Client\\src\\components\\header\\Header.comp.js",[],["37","38"],"C:\\Users\\UnitA\\Projects\\LIT\\LIT---Client\\src\\components\\SelectRoom\\SelectRoom.comp.js",[],"C:\\Users\\UnitA\\Projects\\LIT\\LIT---Client\\src\\App.js",["39"],"import React, { useState, useEffect, useRef, useLayoutEffect } from \"react\";\r\nimport {\r\n  Switch,\r\n  Route,\r\n  useHistory,\r\n  withRouter,\r\n  useLocation,\r\n} from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport \"./App.scss\";\r\nimport ChatWindow from \"./components/chatWindow/ChatWindow.comp\";\r\nimport Header from \"./components/header/Header.comp\";\r\nimport Home from \"./components/home/Home.comp\";\r\nimport SelectRoom from \"./components/SelectRoom/SelectRoom.comp\";\r\nimport Footer from \"./components/footer/Footer.comp\";\r\nimport Menu from \"./components/menu/Menu.comp\";\r\n// import { useTransition, animated } from \"react-spring\";\r\n//const ENDPOINT = process.env.PORT || \"localhost:8080\";\r\n//const socket = io(ENDPOINT); //x10\r\n\r\nconst socket = io({\r\n  reconnection: true,\r\n  reconnectionAttempts: Infinity,\r\n  reconnectionDelay: 1000,\r\n  reconnectionDelayMax: 5000,\r\n  randomizationFactor: 0.5,\r\n  timeout: 30000}); //x10\r\n\r\n  \r\n// io.eio.pingTimeout = 100000; // 2 minutes\r\n// io.eio.pingInterval = 30000; \r\n\r\nconst App = () => {   // store messages in localstorage through refresh, not after logout\r\n  //const [test, setTest] = useState('test');\r\n  const history = useHistory();\r\n  const [typeText, setTypeText] = useState(\"\");\r\n  const [nameText, setNameText] = useState(\"\");\r\n  const [warnNameText, setWarnNameText] = useState(\"\");\r\n  const [warnJoinRoomText, setWarnRoomText] = useState(\"\");\r\n  const [warnCreateRoomText, setWarnCreateRoomText] = useState(\"\");\r\n  const [createRoomText, setCreateRoomText] = useState(\"\");\r\n  const [joinRoomText, setJoinRoomText] = useState(\"\");\r\n  const [typing, setTyping] = useState(\"\");\r\n  const [name, setName] = useState(nameText);\r\n  const [room, setRoom] = useState(joinRoomText);\r\n  const [roomsList, setRoomsList] = useState([]);\r\n  const [usersInRoom, setUsersInRoom] = useState([]);\r\n  const [view, setView] = useState(\"createRoom\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [litMode, setLitMode] = useState(false);\r\n  const [showMenu, setShowMenu] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n  const location = useLocation();\r\n  let userToken = () => localStorage.getItem(\"token\");\r\n\r\n\r\n  // add useEffect to fire on disconnect, i.e - when socket changes...?\r\n\r\n  useEffect( () =>\r\n      history.listen((newLocation, action) => {\r\n        let path = location.pathname;\r\n        let newPath = newLocation.pathname;\r\n\r\n        console.log(path);\r\n        console.log(newPath);\r\n        //let backTarget;\r\n\r\n        // if (action === \"PUSH\") {\r\n        //   if (newPath !== path) {\r\n        //     // if (path === '/rooms') {\r\n        //     //   backTarget = '/';\r\n        //     // } else if (path === '/chat') {\r\n        //     //   backTarget = '/rooms';\r\n        //     // } else if (path === '/') {\r\n        //     //   backTarget = '/';\r\n        //     // }\r\n\r\n        //     history.push(newPath);\r\n        //   }\r\n        // } else {\r\n        //   // Send user back if they try to navigate back\r\n        //   history.go(1);\r\n        // }\r\n      }),\r\n    [location, history]\r\n  );\r\n\r\n  useEffect(() => {\r\n    window.onbeforeunload = confirmExit;\r\n    function confirmExit() {\r\n      return \"show warning\";\r\n    }\r\n  }, []);\r\n\r\n  const login = (chosenName) => {\r\n    if (chosenName) {\r\n      let token = localStorage.getItem(\"token\");\r\n      socket.emit(\"login\", chosenName, token, (nameIsTaken) => {\r\n        if (nameIsTaken) {\r\n          //console.log('Username in use');\r\n          setWarnNameText(\"Username in use\");\r\n        } else {\r\n          setName(chosenName);\r\n          history.push(\"/rooms\");\r\n          setView(\"createRoom\");\r\n          console.log(\"Logged in. Name: \" + chosenName + '. Room: ' + room);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const useWindowSize = () => {\r\n    const [size, setSize] = useState([0, 0]);\r\n    useLayoutEffect(() => {\r\n      function updateSize() {\r\n        setSize([window.innerWidth, window.innerHeight]);\r\n      }\r\n      window.addEventListener(\"resize\", updateSize);\r\n      updateSize();\r\n      return () => window.removeEventListener(\"resize\", updateSize);\r\n    }, []);\r\n    return size;\r\n  };\r\n\r\n  const [, windowHeight] = useWindowSize();\r\n\r\n  const logout = () => {\r\n    socket.emit(\"logout\", {});\r\n    setName(\"\");\r\n    history.push(\"/\");\r\n    setView(\"home\");\r\n    console.log(\"Logged out.\");\r\n  };\r\n\r\n  const joinRoom = (chosenRoom) => {\r\n    if (chosenRoom) {\r\n      socket.emit(\r\n        \"join\",\r\n        { name: name, userRoom: chosenRoom },\r\n        (roomNotFound) => {\r\n          if (roomNotFound) {\r\n            setWarnRoomText(\"Room does not exist\");\r\n          } else {\r\n            setView(\"chat\");\r\n            history.push(\"/chat\");\r\n            setRoom(chosenRoom); // was ''\r\n            console.log(\"Join. Name: \" + name + '. Room: ' + chosenRoom );\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const createRoom = (chosenRoom) => {\r\n    if (chosenRoom) {\r\n      socket.emit(\r\n        \"create\",\r\n        { name: name, userRoom: chosenRoom },\r\n        (roomNameIsTaken) => {\r\n          if (roomNameIsTaken) {\r\n            setWarnCreateRoomText(\"Room already exists\");\r\n          } else {\r\n            setView(\"chat\");\r\n            history.push(\"/chat\");\r\n            setRoom(chosenRoom);\r\n            console.log(\"Create room. Name: \" + name + '. Room: ' + chosenRoom );\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const leaveRoom = (location) => {\r\n    socket.emit(\"leave\", { name, room });\r\n    console.log(\"Leave room. Name: \" + name + '. Room: ' + room );\r\n    setView(\"joinRoom\");\r\n    // if (location.pathname !== '/rooms') { // need to separate the history push from the leave func so it can be called on history listen. Swap the leave() call in navBack for push to history, then in listener conditionally call leave()\r\n    history.push(\"/rooms\");\r\n    // }\r\n    setMessages([]);\r\n    setRoom(\"\");\r\n  };\r\n\r\n  const navBack = () => {\r\n    if (view === \"chat\") {\r\n      leaveRoom();\r\n      //history.push('/rooms');\r\n    } else if (view === \"createRoom\" || view === \"joinRoom\") {\r\n      logout();\r\n    }\r\n  };\r\n\r\n  const toggleMenu = () => { //abstract these two into a toggle function for all boolean useStates\r\n    setShowMenu(!showMenu);\r\n  };\r\n\r\n  const toggleLitMode = () => {\r\n    console.log(!litMode, name, room)\r\n    socket.emit('lit-mode', !litMode, name, room );\r\n    setLitMode(!litMode);\r\n  };\r\n\r\n  const handleRoomTab = (chosenView) => {\r\n    if (chosenView !== view) {\r\n      setView(chosenView);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e, data) => {\r\n    let val = e.target.value;\r\n    switch (data) {\r\n      case \"createRoomText\":\r\n        setCreateRoomText(val);\r\n        if (warnCreateRoomText !== \"\") setWarnCreateRoomText(\"\");\r\n        break;\r\n\r\n      case \"joinRoomText\":\r\n        setJoinRoomText(val);\r\n        if (warnJoinRoomText !== \"\") setWarnRoomText(\"\");\r\n        break;\r\n\r\n      case \"nameText\":\r\n        setNameText(val);\r\n        if (warnNameText !== \"\") setWarnNameText(\"\");\r\n        break;\r\n\r\n      case \"typeText\":\r\n        setTypeText(val);\r\n        socket.emit(\"typing\", name);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  \r\n  \r\n  const getTime = () => {\r\n    let d = new Date();\r\n    return d.toLocaleTimeString().slice(0, -3);\r\n  };\r\n\r\n  function Message(text) {\r\n    this.userName = name;\r\n    this.text = text;\r\n    this.time = getTime();\r\n    this.lit = litMode;\r\n    //return {userName: name, text: msg, time: time}\r\n  }\r\n\r\n  const sendMessage = (txt) => {\r\n    if (txt) {\r\n      const message = new Message(txt);\r\n      socket.emit(\"send_message\", message);\r\n      console.log(\"Msgsent. Name: \" + name + '. Room: ' + room + '. Msg: ', message);\r\n      setTypeText(\"\");\r\n    }\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    socket.on(\"token\", (token) => {\r\n      localStorage.setItem(\"token\", token);\r\n      console.log('receive token: ', token);\r\n      console.log('userToken: ', userToken());\r\n    });\r\n\r\n    socket.on(\"roomInfo\", (rooms) => {\r\n      setRoomsList(rooms);\r\n      console.log('receive roominfo: ', rooms);\r\n    });\r\n\r\n    socket.on(\"usersInRoom\", (roomUsers) => {\r\n      setUsersInRoom(roomUsers);\r\n      console.log('receive usersinroom info: ', roomUsers);\r\n    });\r\n\r\n    socket.on(\"typing\", (typingUserName) => {\r\n      setTyping(typingUserName + \" is typing...\");\r\n      setTimeout(() => {\r\n        setTyping(\"\");\r\n      }, 2000);\r\n    });\r\n\r\n    socket.on(\"disconnect\", function(reason) {\r\n      console.log('User disconnected because ' + reason);\r\n    });\r\n    \r\n    socket.on(\"reconnect\", function() {\r\n      // do not rejoin from here, since the socket.id token and/or rooms are still\r\n      // not available.\r\n      console.log(\"Reconnecting\");\r\n    });\r\n    \r\n    socket.on(\"connect\", function() {\r\n      // thats the key line, now register to the room you want.\r\n      // info about the required rooms (if its not as simple as my \r\n      // example) could easily be reached via a DB connection. It worth it.\r\n      console.log(\"Connect. Name: \" + name + '. Room: ' + room );\r\n      console.log(userToken());\r\n      socket.emit('retrieveUser', userToken(), function retrieveUser({name, room}) {\r\n        setName(name);\r\n        setRoom(room);\r\n        console.log('retrieved user name and room: ' + name + ', ' + room);\r\n        //joinRoom(room);\r\n        if (name && room) {\r\n          history.push(\"/chat\");\r\n        } else if (name) {\r\n          history.push(\"/rooms\");  // put a useEffect in the rooms component to monitor and update as needed.\r\n        } else {\r\n          history.push(\"/\");\r\n        }\r\n      });\r\n      // if ((location.pathname !== \"/\" && name === '') || (location.pathname === \"/chat\" && room === '')) {\r\n      //   logout();\r\n      // }\r\n    \r\n      //joinRoom(room);\r\n    });\r\n\r\n    socket.on('logout', function() {\r\n      logout();\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"token\");\r\n      socket.off(\"roomInfo\");\r\n      socket.off(\"usersInRoom\");\r\n      socket.off(\"typing\");\r\n      socket.off(\"disconnect\");\r\n      socket.off(\"reconnect\");\r\n      socket.off(\"connect\");\r\n    };\r\n  }, []);\r\n  \r\n\r\n  // useEffect(() => {\r\n  //   if ((location.pathname !== \"/\" && name === '') || (location.pathname === \"/chat\" && room === '')) {\r\n    // console.log(location.pathname, name, room)\r\n  //     logout();\r\n  //   } \r\n  // }, [name, room, location, logout]);\r\n\r\n  useEffect(() => {\r\n    socket.once(\"send_message\", function (msg) {\r\n      setMessages([...messages, msg]);\r\n    });\r\n    if (location.pathname === \"/chat\") {\r\n      scrollToBottom();\r\n    }\r\n  }, [messages, location]);\r\n\r\n  \r\n  const handleClickRoom = (txt) => {\r\n    setJoinRoomText(txt);\r\n    if (warnJoinRoomText !== \"\") setWarnRoomText(\"\");\r\n  }\r\n  // const transitions = useTransition(view, (p) => p, {\r\n  //   from: { transform: \"translateX(-100%)\" },\r\n  //   enter: { transform: \"translateX(0)\" },\r\n  //   leave: { transform: \"translateX(100%)\" },\r\n  // });\r\n\r\n  return (\r\n    <div\r\n      className=\"App\"\r\n      style={{\r\n        height: windowHeight,\r\n      }}\r\n    >\r\n      <div className=\"wrapper\">\r\n        <Menu showMenu={showMenu} toggleMenu={toggleMenu} litMode={litMode} toggleLitMode={toggleLitMode} />\r\n        <Header\r\n          location={location}\r\n          room={room}\r\n          name={name}\r\n          view={view}\r\n          typing={typing}\r\n          usersInRoom={usersInRoom}\r\n          navBack={navBack}\r\n          toggleMenu={toggleMenu}\r\n        />\r\n        <div className=\"innerWrapper\">\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Home\r\n                handleChange={handleChange}\r\n                nameText={nameText}\r\n                warnNameText={warnNameText}\r\n                login={login}\r\n              />\r\n            </Route>\r\n            <Route path=\"/rooms\">\r\n              <SelectRoom\r\n                view={view}\r\n                name={name}\r\n                handleChange={handleChange}\r\n                handleRoomTab={handleRoomTab}\r\n                createRoomText={createRoomText}\r\n                warnCreateRoomText={warnCreateRoomText}\r\n                warnJoinRoomText={warnJoinRoomText}\r\n                joinRoomText={joinRoomText}\r\n                handleClickRoom={handleClickRoom}\r\n                joinRoom={joinRoom}\r\n                createRoom={createRoom}\r\n                roomsList={roomsList}\r\n              />\r\n            </Route>\r\n            <Route path=\"/chat\">\r\n              <ChatWindow\r\n                messages={messages}\r\n                messagesEndRef={messagesEndRef}\r\n                typeText={typeText}\r\n                handleChange={handleChange}\r\n                sendMessage={sendMessage}\r\n                name={name}\r\n                typing={typing}\r\n                setTypeText={setTypeText}\r\n              />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n        {location.pathname === \"/chat\" && (\r\n          <Footer\r\n            view={view}\r\n            location={location}\r\n            typeText={typeText}\r\n            handleChange={handleChange}\r\n            sendMessage={sendMessage}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","C:\\Users\\UnitA\\Projects\\LIT\\LIT---Client\\src\\index.js",[],"C:\\Users\\UnitA\\Projects\\LIT\\LIT---Client\\src\\components\\home\\Home.comp.js",[],"C:\\Users\\UnitA\\Projects\\LIT\\LIT---Client\\src\\components\\footer\\Footer.comp.js",[],"C:\\Users\\UnitA\\Projects\\LIT\\LIT---Client\\src\\components\\menu\\Menu.comp.js",[],["40","41"],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":338,"column":6,"nodeType":"48","endLine":338,"endColumn":8,"suggestions":"49"},{"ruleId":"42","replacedBy":"50"},{"ruleId":"44","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'logout', 'name', and 'room'. Either include them or remove the dependency array.","ArrayExpression",["54"],["52"],["53"],"no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},"Update the dependencies array to be: [history, logout, name, room]",{"range":"57","text":"58"},[10203,10205],"[history, logout, name, room]"]